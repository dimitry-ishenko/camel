///////////////////////////////////////////////////////////////////////////////////////////////////
#include "environ.h"
#include <cstdlib>

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace app
{

///////////////////////////////////////////////////////////////////////////////////////////////////
charpp_ptr environ::to_charpp() const
{
    char** rp= static_cast<char**>(calloc(size()+1, sizeof(char*)));
    if(rp == nullptr) throw std::bad_alloc();

    charpp_ptr x(rp);
    for(auto ri= cbegin(); ri != cend(); ++ri, ++rp) *rp= strdup((ri->first+ "="+ ri->second).data());

    return x;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
environ environ::from_charpp(char* args[], bool free)
{
    environ e;
    if(args)
    {
        for(char** ri= args; *ri; ++ri)
        {
            std::string x= *ri;
            auto pos= x.find_first_of('=');

            if(pos != std::string::npos) e.set(x.substr(0, pos), x.substr(pos+1));
            if(free) ::free(*ri);
        }
        if(free) ::free(args);
    }
    return e;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace this_environ
{

///////////////////////////////////////////////////////////////////////////////////////////////////
value_type get(const name_type& name, bool* found) noexcept
{
    char* x= getenv(name.data());

    if(found) *found= x;
    return x? std::string(x): std::string();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
void set(const name_type& name, const value_type& value, bool over)
{
    auto n= clone(name), v= clone(value);
    if(setenv(n.get(), v.get(), over)) throw errno_error();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
void reset(const std::string& name)
{
    if(unsetenv(name.data())) throw errno_error();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
size_type count(const name_type& name) noexcept
{
    return getenv(name.data())? 1: 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
name_type name(char* v, bool* found)
{
    name_type n;
    if(v)
    {
        n=v;
        n.erase(n.find_first_of('='));
    }
    if(found) *found= v;
    return n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
value_type value(char* x, bool* found)
{
    value_type v;
    if(x)
    {
        v=x;
        v.erase(0, v.find_first_of('=')+1);
    }
    if(found) *found= x;
    return v;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
app::environ environ()
{
    app::environ e;
    for(iterator ri= begin(), ri_end= end(); ri != ri_end; ++ri)
        e.set(ri.name(), ri.value());
    return e;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
}
