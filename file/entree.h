///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef ENTREE_H
#define ENTREE_H

///////////////////////////////////////////////////////////////////////////////////////////////////
#include <functional>
#include <vector>
#include <string>
#include <dirent.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace file
{

///////////////////////////////////////////////////////////////////////////////////////////////////
struct entree;
typedef std::vector<entree> entrees;

typedef std::function<bool(const entree&)> filter;
typedef std::function<int(const entree&, const entree&)> compare;

///////////////////////////////////////////////////////////////////////////////////////////////////
extern const filter filter_all;
extern const compare compare_version;
extern const compare compare_alpha;

///////////////////////////////////////////////////////////////////////////////////////////////////
struct entree
{
    enum class type
    {
        block=   DT_BLK,
        chr=     DT_CHR,
        dir=     DT_DIR,
        fifo=    DT_FIFO,
        link=    DT_LNK,
        file=    DT_REG,
        sock=    DT_SOCK,
        unknown= DT_UNKNOWN
    };

    static entrees get(const std::string& path, const filter f= filter_all, const compare c= compare_version);

    std::string name;
    enum type type;

    ino_t inode;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#endif // ENTREE_H
