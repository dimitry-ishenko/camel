///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef SERVER_H
#define SERVER_H

///////////////////////////////////////////////////////////////////////////////////////////////////
#include "process/process.h"
#include <string>

///////////////////////////////////////////////////////////////////////////////////////////////////
struct _XDisplay;

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace app
{

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace x11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
typedef _XDisplay* display;

///////////////////////////////////////////////////////////////////////////////////////////////////
class cookie
{
public:
    cookie();
    std::string value() const noexcept;

private:
    char _M_value[16];
};

///////////////////////////////////////////////////////////////////////////////////////////////////
class server
{
public:
    static const std::string default_name;

public:
    server() = default;
    server(server&) = delete;
    server(const server&) = delete;

    server(server&& x) = default;

    server(const std::string& name, const std::string& server_auth);
    explicit server(const std::string& server_auth): server(default_name, server_auth) { }
    ~server();

    server& operator=(const server&) = delete;
    server& operator=(server&& x) = default;

    ////////////////////
    const std::string& name() const { return _M_name; }

    bool running() { return _M_process.running(); }

    x11::display display() const { return _M_display; }

    void set_cookie(const std::string& path);

private:
    std::string _M_name;
    x11::cookie _M_cookie;

    process _M_process;
    x11::display _M_display= nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#endif // SERVER_H
