///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef ENTREE_H
#define ENTREE_H

///////////////////////////////////////////////////////////////////////////////////////////////////
#include "file.h"

#include <functional>
#include <vector>
#include <string>
#include <dirent.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace file
{

///////////////////////////////////////////////////////////////////////////////////////////////////
struct entree;
typedef std::vector<entree> entrees;

typedef std::function<bool(const entree&)> filter_func;
typedef std::function<int(const entree&, const entree&)> compare_func;

///////////////////////////////////////////////////////////////////////////////////////////////////
extern const filter_func filter_all;
extern const compare_func compare_version;
extern const compare_func compare_alpha;

///////////////////////////////////////////////////////////////////////////////////////////////////
enum class type
{
    block=   DT_BLK,
    chr=     DT_CHR,
    dir=     DT_DIR,
    fifo=    DT_FIFO,
    link=    DT_LNK,
    file=    DT_REG,
    sock=    DT_SOCK,
    unknown= DT_UNKNOWN
};

inline enum type type(const std::string& name) { return static_cast<enum type>((mode(name) & S_IFMT) >> 12); }

///////////////////////////////////////////////////////////////////////////////////////////////////
struct entree
{
    static entrees get(const std::string& path, const filter_func& filter= filter_all, const compare_func& compare= compare_version);

    std::string name;
    enum type type;

    ino_t inode;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#endif // ENTREE_H
