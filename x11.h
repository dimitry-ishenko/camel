///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef X11_H
#define X11_H

///////////////////////////////////////////////////////////////////////////////////////////////////
#include <QProcess>
#include <QObject>

#include <QStringList>
#include <QString>

///////////////////////////////////////////////////////////////////////////////////////////////////
struct _XDisplay;

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace X11
{

///////////////////////////////////////////////////////////////////////////////////////////////////
typedef _XDisplay Display;

///////////////////////////////////////////////////////////////////////////////////////////////////
class Server: public QObject
{
    Q_OBJECT
public:
    Server(QString name= ":0.0", QObject* parent= nullptr);
    ~Server();

    ////////////////////
    const QString& name() const { return _M_name; }
    bool set_name(const QString&);

    const QString& path() const { return _M_path; }
    bool set_path(const QString&);

    const QString& auth() const { return _M_auth; }
    bool set_auth(const QString&);

    const QStringList& args() const { return _M_args; }
    bool set_args(const QStringList&);

    ////////////////////
    bool wait_for_started(int msec);
    bool wait_for_stopped(int msec);

    bool running() { return wait_for_started(0); }
    bool ready() const { return _M_display; }

public slots:
    bool start();
    bool stop();

private:
    QString _M_name;
    QString _M_path;
    QString _M_auth;
    QStringList _M_args;

    QProcess _M_process;
    Display* _M_display= nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#endif // X11_H
