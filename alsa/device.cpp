///////////////////////////////////////////////////////////////////////////////////////////////////
#include "device.h"
#include "alsa_error.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace alsa
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const std::error_category& alsa_category()
{
    static class alsa_category instance;
    return instance;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
device::device(const std::string& name, alsa::stream stream, alsa::mode mode)
{
    int code = snd_pcm_open(&_M_pcm, name.data(), static_cast<snd_pcm_stream_t>(stream), static_cast<int>(mode));
    if(code) throw alsa_error(code, "snd_pcm_open");
}

///////////////////////////////////////////////////////////////////////////////////////////////////
void device::close() noexcept
{
    if(_M_pcm)
    {
        snd_pcm_close(_M_pcm);
        _M_pcm = nullptr;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
void device::set_params(alsa::format format, alsa::access access, unsigned channels, unsigned rate, bool resample, unsigned latency)
{
    int code = snd_pcm_set_params(_M_pcm, static_cast<snd_pcm_format_t>(format),
                                          static_cast<snd_pcm_access_t>(access),
                                          channels,
                                          rate,
                                          resample,
                                          latency);
    if(code) throw alsa_error(code);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
int device::read(void* buffer, unsigned frames)
{
    int n = snd_pcm_readi(_M_pcm, buffer, frames);
    if(n < 0) throw alsa_error(n, "snd_pcm_readi");

    return n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
int device::write(void* buffer, unsigned frames)
{
    int n = snd_pcm_writei(_M_pcm, buffer, frames);
    if(n < 0) throw alsa_error(n, "snd_pcm_writei");

    return n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
}
