///////////////////////////////////////////////////////////////////////////////////////////////////
#include "logger.h"
#include <syslog.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
namespace sys
{

///////////////////////////////////////////////////////////////////////////////////////////////////
std::streamsize streambuf::xsputn(const char* message, std::streamsize n)
{
    int pri;
    switch(current)
    {
    case emergency:
        pri= LOG_EMERG;
        break;
    case alert:
        pri= LOG_ALERT;
        break;
    case critical:
        pri= LOG_CRIT;
        break;
    case error:
        pri= LOG_ERR;
        break;
    case warning:
        pri= LOG_WARNING;
        break;
    case notice:
        pri= LOG_NOTICE;
        break;
    case info:
        pri= LOG_INFO;
        break;
    case debug:
        pri= LOG_DEBUG;
        break;
    }
    ::syslog(pri, "%s", message);

    current= default_level;
    return n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
stream& stream::operator<<(level x)
{
    buffer.current= x;
    return (*this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
stream logger;

///////////////////////////////////////////////////////////////////////////////////////////////////
}
